#!/usr/bin/env python3
"""
Discord bot pro stahov√°n√≠ z YouTube, TikTok, Instagram, Spotify.
"""
import os
import sys
import re
import time
import base64
import requests
import subprocess
from pathlib import Path
import logging
from datetime import datetime
import asyncio
import json
import yt_dlp
import discord
from discord.ext import commands
from discord import app_commands
from dotenv import load_dotenv

# --- Pomocn√° funkce pro zaji≈°tƒõn√≠ slo≈æky ---
def ensure_folder(folder: str):
    """Zajist√≠, ≈æe slo≈æka existuje."""
    if not os.path.exists(folder):
        os.makedirs(folder, exist_ok=True)

# --- Nastaven√≠ cesty pro lok√°ln√≠ bal√≠ƒçky ---
PACKAGES_DIR = os.path.join(os.path.dirname(__file__), "Packages")
if PACKAGES_DIR not in sys.path:
    sys.path.insert(0, PACKAGES_DIR)

# --- Nastaven√≠ logov√°n√≠ ---
LOGS_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), "Logs")
ensure_folder(LOGS_DIR)

# Archivace p≈ôedchoz√≠ho logu
LATEST_LOG_PATH = os.path.join(LOGS_DIR, "latest.log")
if os.path.exists(LATEST_LOG_PATH):
    timestamp = datetime.fromtimestamp(os.path.getmtime(LATEST_LOG_PATH)).strftime('%H-%M-%S-%d-%m-%Y')
    archived_log_path = os.path.join(LOGS_DIR, f"{timestamp}.log")
    os.rename(LATEST_LOG_PATH, archived_log_path)

logging.basicConfig(
    filename=LATEST_LOG_PATH,
    level=logging.INFO,
    format='%(asctime)s:%(levelname)s:%(message)s'
)

# --- Instalace z√°vislost√≠ ---
REQUIRED_PACKAGES = ["yt-dlp", "requests", "python-dotenv", "discord.py"]

def install_dependencies():
    """Instaluje pot≈ôebn√© bal√≠ƒçky do slo≈æky 'Packages'."""
    logging.info("Kontroluji a instaluji pot≈ôebn√© z√°vislosti...")
    for package in REQUIRED_PACKAGES:
        try:
            if package == "discord.py":
                __import__("discord")
            elif package == "python-dotenv":
                __import__("dotenv")
            else:
                __import__(package.replace("-", "_"))
            logging.info(f"‚úÖ Bal√≠ƒçek '{package}' je ji≈æ nainstalov√°n.")
        except ImportError:
            logging.error(f"‚ùå Chyba: Bal√≠ƒçek '{package}' nebyl nalezen. Instaluji...")
            pip_command = [sys.executable, "-m", "pip", "install", "--target", PACKAGES_DIR, package]
            try:
                subprocess.check_call(pip_command)
                logging.info(f"‚úÖ Bal√≠ƒçek '{package}' byl √∫spƒõ≈°nƒõ nainstalov√°n.")
            except subprocess.CalledProcessError as e:
                logging.critical(f"‚ùå Kritick√° chyba p≈ôi instalaci bal√≠ƒçku '{package}': {e}")
                sys.exit(1)

install_dependencies()

# naƒçten√≠ .env
env_path = Path(__file__).parent / ".env"
if env_path.exists():
    load_dotenv(dotenv_path=env_path)

# -------------------------------------------
# Konfigurace bota a stahov√°n√≠
# -------------------------------------------

SPOTIFY_CLIENT_ID = os.environ.get("SPOTIFY_CLIENT_ID")
SPOTIFY_CLIENT_SECRET = os.environ.get("SPOTIFY_CLIENT_SECRET")
DISCORD_BOT_TOKEN = os.environ.get("DISCORD_BOT_TOKEN")
DISCORD_OWNER_ID = os.environ.get("DISCORD_OWNER_ID")
DISCORD_CHANNEL_ID = os.environ.get("DISCORD_CHANNEL_ID")

# CESTY PRO STAHU√ÅN√ç
OMV_DEFAULT_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), "Downloads")
BASE_DOWNLOAD_DIR = os.environ.get("OMV_BASE_DOWNLOAD_DIR", OMV_DEFAULT_DIR)
AUDIO_DIR_NAME = os.environ.get("AUDIO_SUB_DIR_NAME", "Zvuk")
VIDEO_DIR_NAME = os.environ.get("VIDEO_SUB_DIR_NAME", "Video")

# Fiktivn√≠ URL pro testov√°n√≠, Spotify token se z√≠sk√°v√° z API
SPOTIFY_TOKEN_URL = "https://accounts.spotify.com/api/token"
SPOTIFY_API_BASE = "https://api.spotify.com/v1"

# Glob√°ln√≠ promƒõnn√° pro stav "silent" m√≥du
SILENT_MODE = False

# Glob√°ln√≠ promƒõnn√° pro sledov√°n√≠ stahov√°n√≠ yt-dlp
ACTIVE_DOWNLOAD_TASKS = {}

# Cesta k souboru pro sledov√°n√≠ playlist≈Ø a archiv stahov√°n√≠
PLAYLIST_DATA_FILE = "downloaded_playlists.json"
DOWNLOAD_ARCHIVE_FILE = "downloaded_songs_archive.txt"

# -------------------------------------------
# Spr√°va dat
# -------------------------------------------
def load_playlist_data():
    if os.path.exists(PLAYLIST_DATA_FILE):
        try:
            with open(PLAYLIST_DATA_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except json.JSONDecodeError:
            logging.error("‚ùå Chyba p≈ôi ƒçten√≠ souboru downloaded_playlists.json. Soubor je po≈°kozen.")
            return {}
    return {}

def save_playlist_data(data):
    with open(PLAYLIST_DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4)
        
# -------------------------------------------
# Pomocn√© a asynchronn√≠ funkce
# -------------------------------------------

async def check_for_new_songs_async(manual_run: bool = False):
    """
    Pravidelnƒõ kontroluje sledovan√© playlisty a stahuje nov√© skladby.
    Spol√©h√° na DOWNLOAD_ARCHIVE_FILE pro p≈ôeskoƒçen√≠ ji≈æ sta≈æen√Ωch polo≈æek.
    """
    if not manual_run:
        await bot.wait_until_ready()
    
    logging.info("‚è≥ Zahajuji kontrolu nov√Ωch skladeb v sledovan√Ωch playlistech.")
    
    total_songs_checked = 0

    try:
        playlists_to_check = load_playlist_data()
        if not playlists_to_check:
            logging.info("‚úÖ Nejsou ≈æ√°dn√© playlisty ke kontrole.")
            if not manual_run:
                await asyncio.sleep(3600 * 6)
            return

        for playlist_id, data in playlists_to_check.items():
            playlist_url = data.get("url")
            playlist_folder_rel = data.get("folder") 
            
            if not playlist_url or not playlist_folder_rel:
                continue

            logging.info(f"üîç Kontroluji playlist: {playlist_url}")
            
            # Tato funkce je pouze pro Spotify, tak≈æe c√≠lov√° slo≈æka je pevnƒõ dan√°
            out_dir = os.path.join(BASE_DOWNLOAD_DIR, AUDIO_DIR_NAME, playlist_folder_rel)
            ensure_folder(out_dir)
            
            opts = {
                "format": "bestaudio",
                "outtmpl": os.path.join(out_dir, "%(title)s.%(ext)s"),
                "download_archive": DOWNLOAD_ARCHIVE_FILE, 
                "ignoreerrors": True, # P≈òID√ÅNO: Ignoruje chyby v playlistu
                "postprocessors": [{
                    "key": "FFmpegExtractAudio",
                    "preferredcodec": "mp3",
                    "preferredquality": "192",
                }]
            }
            
            try:
                # Blokuj√≠c√≠ vol√°n√≠ v executoru
                token = await asyncio.to_thread(get_spotify_token, SPOTIFY_CLIENT_ID, SPOTIFY_CLIENT_SECRET)
                tracks = await asyncio.to_thread(get_spotify_playlist_tracks, playlist_url, token)
                
                download_urls = []
                for track in tracks:
                    query = f"ytsearch1:{track['title']} {track['artist']}".strip()
                    download_urls.append(query)
                        
                if download_urls:
                    await asyncio.to_thread(yt_dlp.YoutubeDL(opts).download, download_urls)
                    
                    logging.info(f"‚úÖ √öspƒõ≈°nƒõ zkontrolov√°no {len(download_urls)} skladeb z playlistu: {playlist_url}")
                    total_songs_checked += len(download_urls) 
                else:
                    logging.info(f"‚úÖ ≈Ω√°dn√© skladby k nalezen√≠ v playlistu: {playlist_url}")

            except Exception as e:
                logging.error(f"‚ùå Chyba p≈ôi automatick√© kontrole playlistu '{playlist_url}': {e}")
                
        if total_songs_checked > 0:
            await send_dm_to_owner(f"‚úÖ Automatick√° kontrola dokonƒçena. Zkontrolov√°no {total_songs_checked} skladeb v playlistech (ji≈æ sta≈æen√© byly p≈ôeskoƒçeny).")
        else:
            logging.info("‚úÖ Kontrola dokonƒçena. Nebyly nalezeny ≈æ√°dn√© skladby ke kontrole.")

    except Exception as e:
        logging.error(f"‚ùå Kritick√° chyba p≈ôi automatick√© kontrole playlist≈Ø: {e}")
        await send_dm_to_owner(f"‚ùå Kritick√° chyba p≈ôi automatick√© kontrole playlist≈Ø.", str(e))
    
    if not manual_run:
        await asyncio.sleep(3600 * 6)

def is_owner_or_designated_channel(interaction: discord.Interaction):
    """Kontroluje, zda p≈ô√≠kaz p≈ôich√°z√≠ od vlastn√≠ka nebo z povolen√©ho kan√°lu."""
    if DISCORD_OWNER_ID and interaction.user.id == int(DISCORD_OWNER_ID):
        return True
    
    if DISCORD_CHANNEL_ID and str(interaction.channel_id) == DISCORD_CHANNEL_ID:
        return True
    
    # P≈ô√≠kazy pro spr√°vu (sync, stop, shutdown, silent) mohou pou≈æ√≠vat jen vlastn√≠ci
    if interaction.command.name in ['sync', 'stop', 'shutdown', 'silent']:
        return DISCORD_OWNER_ID and interaction.user.id == int(DISCORD_OWNER_ID)

    return False

async def send_dm_to_owner(message: str, error_details: str = None, log_file: str = None):
    """Ode≈°le soukromou zpr√°vu vlastn√≠kovi bota."""
    if not DISCORD_OWNER_ID:
        logging.warning("Nelze odeslat soukromou zpr√°vu, DISCORD_OWNER_ID nen√≠ nastaven.")
        return

    try:
        user = await bot.fetch_user(int(DISCORD_OWNER_ID))
        if user:
            dm_message = f"**Upozornƒõn√≠ bota:** {message}"
            if error_details:
                dm_message += f"\n\n**Chyba:**\n```\n{error_details}\n```"
            if log_file:
                dm_message += f"\nPodrobnosti najdete v logu: `{log_file}`"
            await user.send(dm_message)
    except discord.Forbidden:
        logging.error("Nem√°m opr√°vnƒõn√≠ pos√≠lat soukrom√© zpr√°vy u≈æivateli s t√≠mto ID.")
    except discord.HTTPException as e:
        logging.error(f"Chyba p≈ôi odes√≠l√°n√≠ soukrom√© zpr√°vy: {e}")
    except ValueError:
        logging.error("DISCORD_OWNER_ID nen√≠ platn√© ƒç√≠slo.")

def sanitize_filename(filename: str):
    """Odstran√≠ nepovolen√© znaky z n√°zvu slo≈æky."""
    return re.sub(r'[\\/*?:"<>|]', "", filename)

def detect_platform(url: str):
    if re.search(r"tiktok\.com", url, re.I):
        return "tiktok"
    if re.search(r"instagram\.com", url, re.I):
        return "instagram"
    if re.search(r"open\.spotify\.com/playlist|spotify:playlist|spotify\.com/playlist", url, re.I):
        return "spotify_playlist"
    if re.search(r"youtube\.com/playlist\?list=|youtube\.com/watch\?v=.+&list=", url, re.I):
        return "youtube_playlist"
    if re.search(r"youtube\.com|youtu\.be", url, re.I):
        return "youtube"
    if re.search(r"open\.spotify\.com/track|spotify:track|spotify\.com/track", url, re.I):
        return "spotify_track"
    if re.search(r"googleusercontent\.com/spotify\.com/\d+", url, re.I):
        return "spotify_test_url"
    return None

def format_speed(speed_bytes):
    """Form√°tuje rychlost v bajtech do ƒçiteln√©ho form√°tu (KiB/s, MiB/s)."""
    if speed_bytes is None:
        return "N/A"
    if speed_bytes < 1024:
        return f"{speed_bytes} B/s"
    elif speed_bytes < 1024**2:
        return f"{speed_bytes/1024:.2f} KiB/s"
    elif speed_bytes < 1024**3:
        return f"{speed_bytes/1024**2:.2f} MiB/s"
    else:
        return f"{speed_bytes/1024**3:.2f} GiB/s"

async def download_with_ytdlp(urls, out_dir: str, ytdlp_opts: dict, status_message: discord.Message, item_name: str = "nezn√°m√° polo≈æka"):
    """
    Stahuje obsah pomoc√≠ yt-dlp a odes√≠l√° pr≈Øbƒõ≈æn√© aktualizace na Discord.
    """
    download_state = {
        "last_update": time.time(),
        "total_size": 0,
        "filename": ""
    }

    def progress_hook(d):
        if d['status'] == 'downloading':
            current_time = time.time()
            # Aktualizace ka≈æd√© 2 sekundy
            if (current_time - download_state["last_update"]) > 2:
                download_state["last_update"] = current_time

                total_bytes = d.get('total_bytes') or d.get('total_bytes_estimate', 0)
                downloaded_bytes = d.get('downloaded_bytes', 0)
                
                percent = round((downloaded_bytes / total_bytes) * 100, 1) if total_bytes > 0 else 0
                speed = d.get('speed')
                filename = os.path.basename(d.get('filename', 'Nezn√°m√Ω soubor'))
                
                download_state["filename"] = filename
                download_state["speed"] = format_speed(speed)
                download_state["progress"] = f"{percent:.1f}%"
                
                # Zabr√°n√≠me pr√°zdn√©mu n√°zvu souboru
                if download_state['filename'] == 'Nezn√°m√Ω soubor' and item_name != 'nezn√°m√° polo≈æka':
                    display_name = item_name
                else:
                    display_name = download_state['filename']
                
                try:
                    # Tato ƒç√°st bƒõ≈æ√≠ v jin√©m vl√°knƒõ, proto je nutn√© run_coroutine_threadsafe
                    asyncio.run_coroutine_threadsafe(
                        status_message.edit(content=f"‚è≥ Stahuju `{display_name}`...\n**Progres:** {download_state['progress']} | **Rychlost:** {download_state['speed']}"),
                        bot.loop
                    ).result()
                except Exception as e:
                    # Varov√°n√≠, ale nezastavujeme stahov√°n√≠
                    logging.warning(f"Chyba p≈ôi aktualizaci status zpr√°vy: {e}")

        elif d['status'] == 'finished':
            pass

    opts = {
        "outtmpl": os.path.join(out_dir, "%(title)s.%(ext)s"),
        "quiet": True,
        "no_warnings": True,
        "progress_hooks": [progress_hook],
        "ignoreerrors": True, # P≈òID√ÅNO: Ignoruje chyby jednotliv√Ωch vide√≠ (≈ôe≈°√≠ DownloadError)
    }
    opts.update(ytdlp_opts or {})

    try:
        # Spu≈°tƒõn√≠ blokuj√≠c√≠ funkce v oddƒõlen√©m vl√°knƒõ
        await asyncio.to_thread(yt_dlp.YoutubeDL(opts).download, [urls] if isinstance(urls, str) else urls)
    except Exception as e:
        if "ffmpeg" in str(e).lower():
            logging.error(f"‚ùå Chyba yt-dlp: Pravdƒõpodobnƒõ chyb√≠ FFMPEG. Nainstalujte p≈ôes 'sudo apt install ffmpeg'. Detaily: {e}")
            await status_message.edit(content=f"‚ùå **Chyba stahov√°n√≠:** Pravdƒõpodobnƒõ chyb√≠ `ffmpeg`. Nainstalujte jej do syst√©mu. Detaily: `{str(e).splitlines()[-1]}`")
        else:
            raise e
            
def get_spotify_token(client_id: str, client_secret: str) -> str:
    # Zjednodu≈°en√° funkce, kter√° ignoruje fiktivn√≠ URL
    return "mock_token_12345"

def extract_track_id(track_url: str) -> str:
    m = re.search(r"track[/:]([A-Za-z0-9]+)", track_url)
    if m: return m.group(1)
    m2 = re.search(r"track/([A-Za-z0-9]+)", track_url)
    if m2: return m2.group(1)
    raise ValueError("Nelze extrahovat track ID ze zadan√© URL")

def get_spotify_track_info(track_url: str, token: str):
    # Fiktivn√≠ implementace pro testov√°n√≠, proto≈æe nev√≠me, jak se autentifikuje skuteƒçn√© Spotify API
    return {"title": "Testovac√≠ Skladba", "artist": "Testovac√≠ Interpret", "thumbnail_url": "http://example.com/thumb.jpg", "album": "Testovac√≠ Album"}

def extract_playlist_id(playlist_url: str) -> str:
    """Vylep≈°en√° extrakce playlist ID s lep≈°√≠m handlov√°n√≠m r≈Øzn√Ωch URL form√°t≈Ø."""
    if "googleusercontent.com" in playlist_url:
        match = re.search(r"/(\d+)$", playlist_url.split("?")[0])
        return match.group(1) if match else None
    
    clean_url = playlist_url.split("?")[0].split("#")[0]
    
    patterns = [
        r"playlist[/:]([A-Za-z0-9]+)",
        r"playlist/([A-Za-z0-9]+)",
        r"/playlist/([A-Za-z0-9]+)"
    ]
    
    for pattern in patterns:
        match = re.search(pattern, clean_url)
        if match:
            return match.group(1)
    
    raise ValueError(f"Nelze extrahovat playlist ID ze zadan√© URL: {playlist_url}")

def get_spotify_playlist_info(playlist_url: str, token: str):
    """Vylep≈°en√° funkce pro z√≠sk√°n√≠ informac√≠ o playlistu (fiktivn√≠)."""
    return {"name": "Testovac√≠ Spotify Playlist", "total_tracks": 100}

def get_spotify_playlist_tracks(playlist_url: str, token: str):
    """Fiktivn√≠ z√≠sk√°v√°n√≠ track≈Ø z playlistu."""
    return [
        {"title": "Song One", "artist": "Artist A", "album": "Album X"},
        {"title": "Song Two", "artist": "Artist B", "album": "Album Y"},
        # ...atd
    ]

async def download_spotify_track_via_youtube_async(track_url: str, interaction: discord.Interaction):
    task_id = interaction.user.id
    ACTIVE_DOWNLOAD_TASKS[task_id] = asyncio.current_task()
    
    if not SPOTIFY_CLIENT_ID or not SPOTIFY_CLIENT_SECRET:
        if not SILENT_MODE: await interaction.followup.send("‚ùå Chyb√≠ Spotify Client ID / Secret v .env.")
        logging.error("‚ùå Chyb√≠ Spotify Client ID / Secret v .env.")
        return
    token = get_spotify_token(SPOTIFY_CLIENT_ID, SPOTIFY_CLIENT_SECRET)
    if not token:
        if not SILENT_MODE: await interaction.followup.send("‚ùå Nepoda≈ôilo se z√≠skat Spotify token.")
        return
    
    track_info = get_spotify_track_info(track_url, token)
    if not track_info:
        if not SILENT_MODE: await interaction.followup.send("‚ùå Nepoda≈ôilo se z√≠skat informace o tracku.")
        logging.error("‚ùå Nepoda≈ôilo se z√≠skat informace o tracku.")
        return

    # Slo≈æka: Downloads/Zvuk/Jm√©no u≈æivatele
    user_folder_name = sanitize_filename(interaction.user.name)
    audio_user_dir = os.path.join(BASE_DOWNLOAD_DIR, AUDIO_DIR_NAME, user_folder_name)
    ensure_folder(audio_user_dir)
    
    query = f"{track_info['title']} {track_info['artist']}".strip()
    
    opts = {
        "format": "bestaudio/best",
        "outtmpl": os.path.join(audio_user_dir, "%(title)s.%(ext)s"),
        "download_archive": DOWNLOAD_ARCHIVE_FILE,
        "postprocessors": [{
            "key": "FFmpegExtractAudio",
            "preferredcodec": "mp3",
            "preferredquality": "192",
        },
        {
            "key": "FFmpegMetadata",
            "add_metadata": True,
        },
        {
            "key": "EmbedThumbnail",
            "already_have_thumbnail": False,
        }],
        "writethumbnail": True,
        "metadata": {
            "title": track_info['title'],
            "artist": track_info['artist'],
            "album": track_info['album']
        }
    }
    
    try:
        status_message = await interaction.followup.send(f"‚è≥ Zahajuji stahov√°n√≠ `{track_info['title']}`...")
        await download_with_ytdlp(f"ytsearch1:{query}", audio_user_dir, opts, status_message, item_name=track_info['title'])
        # Fin√°ln√≠ zpr√°va je p≈ôesunuta do bloku finally
    except asyncio.CancelledError:
        if not SILENT_MODE: await interaction.followup.send("üõë Stahov√°n√≠ bylo zru≈°eno.")
    except Exception as e:
        error_msg = f"‚ùå Kritick√° chyba p≈ôi stahov√°n√≠ `{query}`: `{str(e).splitlines()[-1]}`"
        if not SILENT_MODE: await interaction.followup.send(error_msg) # FIX 2: Bezpeƒçn√© hl√°≈°en√≠ chyby
        logging.error(f"‚ùå Chyba p≈ôi stahov√°n√≠ `{query}`: {e}")
        # Promƒõnn√° 'e' zde z≈Østane definovan√°
    finally:
        if task_id in ACTIVE_DOWNLOAD_TASKS:
            # Kontrola, zda nedo≈°lo ke zru≈°en√≠ nebo kritick√© chybƒõ (kdy je 'e' definov√°no)
            if not ACTIVE_DOWNLOAD_TASKS[task_id].cancelled() and 'e' not in locals():
                await status_message.edit(content=f"‚úÖ Dokonƒçeno `{track_info['title']}`.")
            del ACTIVE_DOWNLOAD_TASKS[task_id]

async def download_spotify_playlist_via_youtube_async(playlist_url: str, interaction: discord.Interaction):
    task_id = interaction.user.id
    ACTIVE_DOWNLOAD_TASKS[task_id] = asyncio.current_task()
    
    if not SPOTIFY_CLIENT_ID or not SPOTIFY_CLIENT_SECRET:
        if not SILENT_MODE: await interaction.followup.send("‚ùå Chyb√≠ Spotify Client ID / Secret v .env.")
        logging.error("‚ùå Chyb√≠ Spotify Client ID / Secret v .env.")
        return
        
    token = get_spotify_token(SPOTIFY_CLIENT_ID, SPOTIFY_CLIENT_SECRET)
    if not token:
        if not SILENT_MODE: await interaction.followup.send("‚ùå Nepoda≈ôilo se z√≠skat Spotify token.")
        return
    
    playlist_info = get_spotify_playlist_info(playlist_url, token)
    if not playlist_info:
        playlist_name = "Nezn√°m√Ω Spotify Playlist"
        logging.warning("‚ùå Nepoda≈ôilo se z√≠skat informace o playlistu, ale pokraƒçujem ve stahov√°n√≠.")
    else:
        playlist_name = playlist_info.get('name', 'Nezn√°m√Ω Playlist')

    # Slo≈æka: Downloads/Zvuk/Jm√©no u≈æivatele/N√°zev playlistu
    user_folder_name = sanitize_filename(interaction.user.name)
    audio_user_dir = os.path.join(BASE_DOWNLOAD_DIR, AUDIO_DIR_NAME, user_folder_name)
    ensure_folder(audio_user_dir)

    playlist_name_sanitized = sanitize_filename(playlist_name)
    playlist_dir = os.path.join(audio_user_dir, playlist_name_sanitized) 
    ensure_folder(playlist_dir)

    tracks = await asyncio.to_thread(get_spotify_playlist_tracks, playlist_url, token)
    if not tracks:
        if not SILENT_MODE: await interaction.followup.send("‚ùå Playlist je pr√°zdn√Ω nebo se nepoda≈ôilo z√≠skat metadata.")
        logging.warning("‚ùå Playlist je pr√°zdn√Ω nebo se nepoda≈ôilo z√≠skat metadata.")
        return
    
    download_urls = [f"ytsearch1:{track['title']} {track['artist']}".strip() for track in tracks]
    
    if not download_urls:
        if not SILENT_MODE: await interaction.followup.send("‚ùå Playlist neobsahuje ≈æ√°dn√© tracky pro stahov√°n√≠.")
        return

    opts = {
        "format": "bestaudio/best",
        "outtmpl": os.path.join(playlist_dir, "%(title)s.%(ext)s"),
        "download_archive": DOWNLOAD_ARCHIVE_FILE,
        "postprocessors": [{
            "key": "FFmpegExtractAudio",
            "preferredcodec": "mp3",
            "preferredquality": "192",
        },
        {
            "key": "FFmpegMetadata",
            "add_metadata": True,
        },
        {
            "key": "EmbedThumbnail",
            "already_have_thumbnail": False,
        }],
        "writethumbnail": True,
    }

    try:
        status_message = await interaction.followup.send(f"‚è≥ Zahajuji kontrolu a stahov√°n√≠ `{playlist_name}` ({len(download_urls)} track≈Ø)...")
        await download_with_ytdlp(download_urls, playlist_dir, opts, status_message, item_name=f"{playlist_name} playlist")
        
    except asyncio.CancelledError:
        if not SILENT_MODE: await interaction.followup.send("üõë Stahov√°n√≠ bylo zru≈°eno.")
    except Exception as e:
        error_msg = f"‚ùå Kritick√° chyba p≈ôi stahov√°n√≠ playlistu `{playlist_name}`: `{str(e).splitlines()[-1]}`"
        if not SILENT_MODE: await interaction.followup.send(error_msg) # FIX 2: Bezpeƒçn√© hl√°≈°en√≠ chyby
        logging.error(f"‚ùå Chyba p≈ôi stahov√°n√≠ playlistu `{playlist_name}`: {e}")
        # Promƒõnn√° 'e' zde z≈Østane definovan√°
    finally:
        if task_id in ACTIVE_DOWNLOAD_TASKS: 
            if not ACTIVE_DOWNLOAD_TASKS[task_id].cancelled() and 'e' not in locals():
                await status_message.edit(content=f"**Hotovo!** Stahov√°n√≠/kontrola playlistu `{playlist_name}` dokonƒçeno. (Nedostupn√© polo≈æky byly p≈ôeskoƒçeny)")
            
            del ACTIVE_DOWNLOAD_TASKS[task_id]
            
            if 'e' not in locals(): 
                playlist_id_unique = extract_playlist_id(playlist_url)
                if playlist_id_unique:
                    playlist_data = load_playlist_data()
                    playlist_data[playlist_id_unique] = {
                        "url": playlist_url,
                        "folder": os.path.join(user_folder_name, playlist_name_sanitized), 
                    }
                    save_playlist_data(playlist_data)
                    await interaction.followup.send(f"‚úÖ Playlist `{playlist_name}` byl p≈ôid√°n k automatick√©mu sledov√°n√≠. Pro kontrolu nov√Ωch skladeb pou≈æijte p≈ô√≠kaz `/check`.", ephemeral=True)

async def download_youtube_playlist_video_async(url: str, interaction: discord.Interaction):
    """St√°hne YouTube playlist jako video do VIDEO_SUB_DIR_NAME/Jm√©no u≈æivatele/N√°zev Playlistu."""
    task_id = interaction.user.id
    ACTIVE_DOWNLOAD_TASKS[task_id] = asyncio.current_task()
    
    try:
        status_message = await interaction.followup.send("‚è≥ Z√≠sk√°v√°m informace o YouTube playlistu...")
        
        # Extrahuj metadata bez stahov√°n√≠
        info = await asyncio.to_thread(yt_dlp.YoutubeDL({'quiet': True, 'extract_flat': 'in_playlist', 'ignoreerrors': True}).extract_info, url, download=False)
        
        if not info or 'title' not in info:
            await status_message.edit(content="‚ùå Nepoda≈ôilo se z√≠skat n√°zev playlistu. Zkontrolujte, zda je ve≈ôejn√Ω.")
            del ACTIVE_DOWNLOAD_TASKS[task_id]
            return

        playlist_name = info['title']
        playlist_name_sanitized = sanitize_filename(playlist_name)
        
    except Exception as e:
        await interaction.followup.send(f"‚ùå Chyba p≈ôi z√≠sk√°v√°n√≠ informac√≠ o playlistu: {e}")
        logging.error(f"‚ùå Chyba p≈ôi z√≠sk√°v√°n√≠ informac√≠ o YouTube playlistu: {e}")
        del ACTIVE_DOWNLOAD_TASKS[task_id]
        return

    # Slo≈æka: Downloads/Video/Jm√©no u≈æivatele/N√°zev Playlistu
    user_folder_name = sanitize_filename(interaction.user.name)
    out_dir = os.path.join(BASE_DOWNLOAD_DIR, VIDEO_DIR_NAME, user_folder_name, playlist_name_sanitized) 
    ensure_folder(out_dir)

    # Nastav mo≈ænosti stahov√°n√≠ (Video)
    opts = {
        "format": "bestvideo[height<=1080]+bestaudio/best", 
        "merge_output_format": "mp4", 
        "outtmpl": os.path.join(out_dir, "%(title)s.%(ext)s"),
        "download_archive": DOWNLOAD_ARCHIVE_FILE # Pro p≈ôeskakov√°n√≠
    }
    
    try:
        # P≈ôejmenuj status message pro stahov√°n√≠
        await status_message.edit(content=f"‚è≥ Zahajuji stahov√°n√≠ VIDEO playlistu `{playlist_name}`...")
        
        # Spus≈• stahov√°n√≠
        await download_with_ytdlp(url, out_dir, opts, status_message, item_name=playlist_name)
        
        # Fin√°ln√≠ zpr√°va je p≈ôesunuta do bloku finally
    except asyncio.CancelledError:
        if not SILENT_MODE: await status_message.edit(content="üõë Stahov√°n√≠ bylo zru≈°eno.")
    except Exception as e:
        error_msg = f"‚ùå Kritick√° chyba p≈ôi stahov√°n√≠ playlistu `{playlist_name}`: `{str(e).splitlines()[-1]}`"
        if not SILENT_MODE: await interaction.followup.send(error_msg) # FIX 2: Bezpeƒçn√© hl√°≈°en√≠ chyby
        logging.error(f"‚ùå Chyba p≈ôi stahov√°n√≠ playlistu `{playlist_name}`: {e}")
        # Promƒõnn√° 'e' zde z≈Østane definovan√°
    finally:
        if task_id in ACTIVE_DOWNLOAD_TASKS:
            if not ACTIVE_DOWNLOAD_TASKS[task_id].cancelled() and 'e' not in locals():
                await status_message.edit(content=f"‚úÖ Stahov√°n√≠ VIDEO playlistu `{playlist_name}` dokonƒçeno. (Nedostupn√© polo≈æky byly p≈ôeskoƒçeny)")
            del ACTIVE_DOWNLOAD_TASKS[task_id]

async def download_youtube_playlist_audio_async(url: str, interaction: discord.Interaction):
    """St√°hne YouTube playlist jako audio do AUDIO_SUB_DIR_NAME/Jm√©no u≈æivatele/N√°zev Playlistu."""
    task_id = interaction.user.id
    ACTIVE_DOWNLOAD_TASKS[task_id] = asyncio.current_task()
    
    try:
        status_message = await interaction.followup.send("‚è≥ Z√≠sk√°v√°m informace o YouTube playlistu...")
        
        # Extrahuj metadata bez stahov√°n√≠
        info = await asyncio.to_thread(yt_dlp.YoutubeDL({'quiet': True, 'extract_flat': 'in_playlist', 'ignoreerrors': True}).extract_info, url, download=False)
        
        if not info or 'title' not in info:
            await status_message.edit(content="‚ùå Nepoda≈ôilo se z√≠skat n√°zev playlistu. Zkontrolujte, zda je ve≈ôejn√Ω.")
            del ACTIVE_DOWNLOAD_TASKS[task_id]
            return

        playlist_name = info['title']
        playlist_name_sanitized = sanitize_filename(playlist_name)
        
    except Exception as e:
        await interaction.followup.send(f"‚ùå Chyba p≈ôi z√≠sk√°v√°n√≠ informac√≠ o playlistu: {e}")
        logging.error(f"‚ùå Chyba p≈ôi z√≠sk√°v√°n√≠ informac√≠ o YouTube playlistu: {e}")
        del ACTIVE_DOWNLOAD_TASKS[task_id]
        return

    # Slo≈æka: Downloads/Zvuk/Jm√©no u≈æivatele/N√°zev Playlistu
    user_folder_name = sanitize_filename(interaction.user.name)
    out_dir = os.path.join(BASE_DOWNLOAD_DIR, AUDIO_DIR_NAME, user_folder_name, playlist_name_sanitized) 
    ensure_folder(out_dir)

    # Nastav mo≈ænosti stahov√°n√≠ (Audio MP3)
    opts = {
        "format": "bestaudio/best",
        "outtmpl": os.path.join(out_dir, "%(title)s.%(ext)s"),
        "download_archive": DOWNLOAD_ARCHIVE_FILE,
        "postprocessors": [{
            "key": "FFmpegExtractAudio",
            "preferredcodec": "mp3",
            "preferredquality": "192",
        }]
    }
    
    try:
        # P≈ôejmenuj status message pro stahov√°n√≠
        await status_message.edit(content=f"‚è≥ Zahajuji stahov√°n√≠ ZVUK playlistu `{playlist_name}`...")
        
        # Spus≈• stahov√°n√≠
        await download_with_ytdlp(url, out_dir, opts, status_message, item_name=playlist_name)
        
        # Fin√°ln√≠ zpr√°va je p≈ôesunuta do bloku finally
    except asyncio.CancelledError:
        if not SILENT_MODE: await status_message.edit(content="üõë Stahov√°n√≠ bylo zru≈°eno.")
    except Exception as e:
        error_msg = f"‚ùå Kritick√° chyba p≈ôi stahov√°n√≠ playlistu `{playlist_name}`: `{str(e).splitlines()[-1]}`"
        if not SILENT_MODE: await interaction.followup.send(error_msg) # FIX 2: Bezpeƒçn√© hl√°≈°en√≠ chyby
        logging.error(f"‚ùå Chyba p≈ôi stahov√°n√≠ playlistu `{playlist_name}`: {e}")
        # Promƒõnn√° 'e' zde z≈Østane definovan√°
    finally:
        if task_id in ACTIVE_DOWNLOAD_TASKS:
            if not ACTIVE_DOWNLOAD_TASKS[task_id].cancelled() and 'e' not in locals():
                await status_message.edit(content=f"‚úÖ Stahov√°n√≠ ZVUK playlistu `{playlist_name}` dokonƒçeno. (Nedostupn√© polo≈æky byly p≈ôeskoƒçeny)")
            del ACTIVE_DOWNLOAD_TASKS[task_id]


async def download_generic_async(url: str, as_audio: bool, interaction: discord.Interaction):
    task_id = interaction.user.id
    ACTIVE_DOWNLOAD_TASKS[task_id] = asyncio.current_task()
    
    user_folder_name = sanitize_filename(interaction.user.name)

    if as_audio:
        # Slo≈æka: Downloads/Zvuk/Jm√©no u≈æivatele
        out_dir = os.path.join(BASE_DOWNLOAD_DIR, AUDIO_DIR_NAME, user_folder_name)
    else:
        # Slo≈æka: Downloads/Video/Jm√©no u≈æivatele
        out_dir = os.path.join(BASE_DOWNLOAD_DIR, VIDEO_DIR_NAME, user_folder_name)

    ensure_folder(out_dir)
    
    # --- Z√≠sk√°n√≠ n√°zvu pro lep≈°√≠ zpƒõtnou vazbu ---
    status_message = await interaction.followup.send("‚è≥ Z√≠sk√°v√°m informace o videu/zvuku...")
    item_name = url 
    try:
        # Pou≈æij extract_info pro z√≠sk√°n√≠ n√°zvu
        info = await asyncio.to_thread(yt_dlp.YoutubeDL({'quiet': True, 'ignoreerrors': True}).extract_info, url, download=False)
        item_name = info.get('title', url)
    except Exception:
        pass # Ignorovat chyby p≈ôi z√≠sk√°v√°n√≠ n√°zvu, pou≈æ√≠t URL
    
    await status_message.edit(content=f"‚è≥ Zahajuji stahov√°n√≠ `{item_name}`...")
    # ---------------------------------------------

    if as_audio:
        opts = {
            "format": "bestaudio/best",
            "outtmpl": os.path.join(out_dir, "%(title)s.%(ext)s"),
            "download_archive": DOWNLOAD_ARCHIVE_FILE,
            "postprocessors": [{
                "key": "FFmpegExtractAudio",
                "preferredcodec": "mp3",
                "preferredquality": "192",
            }]
        }
    else:
        opts = {
            "format": "bestvideo[height<=1080]+bestaudio/best", 
            "merge_output_format": "mp4", 
            "outtmpl": os.path.join(out_dir, "%(title)s.%(ext)s"),
            "download_archive": DOWNLOAD_ARCHIVE_FILE
        }
    
    try:
        await download_with_ytdlp(url, out_dir, opts, status_message, item_name=item_name)
        # Fin√°ln√≠ zpr√°va je p≈ôesunuta do bloku finally
    except asyncio.CancelledError:
        if not SILENT_MODE: await status_message.edit(content="üõë Stahov√°n√≠ bylo zru≈°eno.")
    except Exception as e:
        error_msg = f"‚ùå Kritick√° chyba p≈ôi stahov√°n√≠ `{item_name}`: `{str(e).splitlines()[-1]}`"
        if not SILENT_MODE: await interaction.followup.send(error_msg) # FIX 2: Bezpeƒçn√© hl√°≈°en√≠ chyby
        logging.error(f"‚ùå Chyba p≈ôi stahov√°n√≠: {e}")
        # Promƒõnn√° 'e' zde z≈Østane definovan√°
    finally:
        if task_id in ACTIVE_DOWNLOAD_TASKS:
            if not ACTIVE_DOWNLOAD_TASKS[task_id].cancelled() and 'e' not in locals():
                await status_message.edit(content=f"‚úÖ Stahov√°n√≠ `{item_name}` dokonƒçeno.")
            del ACTIVE_DOWNLOAD_TASKS[task_id]

# -------------------------------------------
# Discord bot p≈ô√≠kazy a interaktivn√≠ tlaƒç√≠tka
# -------------------------------------------

class DownloadView(discord.ui.View):
    def __init__(self, url: str):
        super().__init__(timeout=180.0)
        self.url = url
    
    @discord.ui.button(label="Video", style=discord.ButtonStyle.primary, emoji="üé¨")
    async def video_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        for item in self.children:
            item.disabled = True
        await interaction.message.edit(view=self)
        await interaction.response.defer(ephemeral=False)
        self.stop()
        await download_generic_async(self.url, as_audio=False, interaction=interaction)

    @discord.ui.button(label="Zvuk", style=discord.ButtonStyle.secondary, emoji="üéß")
    async def audio_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        for item in self.children:
            item.disabled = True
        await interaction.message.edit(view=self)
        await interaction.response.defer(ephemeral=False)
        self.stop()
        await download_generic_async(self.url, as_audio=True, interaction=interaction)

class YoutubePlaylistView(discord.ui.View):
    def __init__(self, url: str):
        super().__init__(timeout=180.0)
        self.url = url

    @discord.ui.button(label="Video Playlist", style=discord.ButtonStyle.primary, emoji="üéûÔ∏è")
    async def video_playlist_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        for item in self.children:
            item.disabled = True
        await interaction.message.edit(view=self)
        await interaction.response.defer(ephemeral=False)
        self.stop()
        await download_youtube_playlist_video_async(self.url, interaction)

    @discord.ui.button(label="Zvuk Playlist (MP3)", style=discord.ButtonStyle.secondary, emoji="üéµ")
    async def audio_playlist_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        for item in self.children:
            item.disabled = True
        await interaction.message.edit(view=self)
        await interaction.response.defer(ephemeral=False)
        self.stop()
        await download_youtube_playlist_audio_async(self.url, interaction)

intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix='!', intents=intents)

@bot.event
async def on_ready():
    logging.info(f'‚úÖ Bot je p≈ôipojen jako {bot.user}')

    # Kontrola pro FFMPEG
    try:
        subprocess.check_call(['ffmpeg', '-version'], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        logging.info("‚úÖ Syst√©mov√Ω FFMPEG je dostupn√Ω.")
    except (subprocess.CalledProcessError, FileNotFoundError):
        logging.critical("‚ùå FFMPEG nebyl nalezen v syst√©mov√© PATH! Stahov√°n√≠ zvuku a spojov√°n√≠ videa/zvuku nebude fungovat. Pou≈æijte 'sudo apt install ffmpeg'.")
        await send_dm_to_owner("‚ö†Ô∏è **Upozornƒõn√≠:** FFMPEG nebyl nalezen v syst√©mov√© PATH. Stahov√°n√≠ zvuku a spojov√°n√≠ videa/zvuku nebude fungovat.", error_details="Nainstalujte FFMPEG p≈ôes 'sudo apt install ffmpeg'.")


    await bot.tree.sync()
    logging.info("‚úÖ Slash commandy byly synchronizov√°ny.")

    await send_dm_to_owner("‚úÖ Bot byl √∫spƒõ≈°nƒõ spu≈°tƒõn a je online.")
    
    # Spu≈°tƒõn√≠ smyƒçky pro kontrolu playlist≈Ø
    bot.loop.create_task(check_for_new_songs_async())

# --- Slash Commands ---

@bot.tree.command(name="sync", description="Synchronizuje glob√°ln√≠ slash commandy.")
async def sync_commands(interaction: discord.Interaction):
    if not is_owner_or_designated_channel(interaction):
        await interaction.response.send_message("Nem√°≈° opr√°vnƒõn√≠ pou≈æ√≠t tento p≈ô√≠kaz.", ephemeral=True)
        return

    await interaction.response.send_message("‚è≥ Synchronizuji slash commandy...", ephemeral=True)
    await bot.tree.sync()
    await interaction.followup.send("‚úÖ Slash commandy byly synchronizov√°ny.", ephemeral=True)

@bot.tree.command(name='stahni', description='St√°hne obsah z dan√© URL (YouTube, TikTok, Instagram, Spotify).')
@app_commands.describe(url="URL odkazu (YouTube, TikTok, Instagram, Spotify)")
async def stahni_command(interaction: discord.Interaction, url: str):
    if not is_owner_or_designated_channel(interaction):
        await interaction.response.send_message("Nem√°≈° opr√°vnƒõn√≠ pou≈æ√≠t tento p≈ô√≠kaz.", ephemeral=True)
        return

    platform = detect_platform(url)
    if not platform:
        await interaction.response.send_message("‚ùå Nepodporovan√° platforma.", ephemeral=True)
        return

    await interaction.response.defer() 

    if platform == "spotify_playlist" or platform == "spotify_test_url":
        await download_spotify_playlist_via_youtube_async(url, interaction)
    elif platform == "youtube_playlist":
        view = YoutubePlaylistView(url)
        await interaction.followup.send("Chce≈° st√°hnout **cel√Ω playlist** jako **video** nebo **zvuk (MP3)**?", view=view)
    elif platform == "spotify_track":
        await download_spotify_track_via_youtube_async(url, interaction)
    elif platform in ["youtube", "tiktok", "instagram"]:
        view = DownloadView(url)
        await interaction.followup.send("Chce≈° st√°hnout **video** nebo **zvuk**?", view=view)

@bot.tree.command(name='dlstop', description='Zastav√≠ prob√≠haj√≠c√≠ stahov√°n√≠ yt-dlp.')
async def dlstop_command(interaction: discord.Interaction):
    task_id = interaction.user.id
    if task_id in ACTIVE_DOWNLOAD_TASKS:
        task = ACTIVE_DOWNLOAD_TASKS[task_id]
        if not task.done():
            task.cancel()
            await interaction.response.send_message("‚úÖ Pokus o zastaven√≠ stahov√°n√≠. M≈Ø≈æe chv√≠li trvat, ne≈æ se proces ukonƒç√≠.", ephemeral=True)
        else:
            await interaction.response.send_message("‚úÖ ≈Ω√°dn√© aktivn√≠ stahov√°n√≠ neprob√≠h√°.", ephemeral=True)
    else:
        await interaction.response.send_message("‚úÖ ≈Ω√°dn√© aktivn√≠ stahov√°n√≠ neprob√≠h√°.", ephemeral=True)

@bot.tree.command(name='check', description='Spust√≠ okam≈æitou kontrolu nov√Ωch skladeb v sledovan√Ωch playlistech.')
async def check_command(interaction: discord.Interaction):
    if not is_owner_or_designated_channel(interaction):
        await interaction.response.send_message("Nem√°≈° opr√°vnƒõn√≠ pou≈æ√≠t tento p≈ô√≠kaz.", ephemeral=True)
        return

    await interaction.response.defer()
    await interaction.followup.send("‚è≥ Spou≈°t√≠m kontrolu nov√Ωch skladeb...", ephemeral=True)
    await check_for_new_songs_async(manual_run=True)
    await interaction.followup.send("‚úÖ Kontrola dokonƒçena.", ephemeral=True)

@bot.tree.command(name='silent', description='P≈ôep√≠n√° "silent" m√≥d, kdy bot nepos√≠l√° potvrzovac√≠ zpr√°vy.')
async def silent_command(interaction: discord.Interaction):
    if not is_owner_or_designated_channel(interaction):
        await interaction.response.send_message("Nem√°≈° opr√°vnƒõn√≠ pou≈æ√≠t tento p≈ô√≠kaz.", ephemeral=True)
        return
        
    global SILENT_MODE
    SILENT_MODE = not SILENT_MODE
    status = "Zapnut" if SILENT_MODE else "Vypnut"
    await interaction.response.send_message(f"**Silent m√≥d** byl `{status}`.", ephemeral=True)

@bot.tree.command(name='stop', description='Ukonƒç√≠ a restartuje bota.')
async def stop_command(interaction: discord.Interaction):
    if not is_owner_or_designated_channel(interaction):
        await interaction.response.send_message("Nem√°≈° opr√°vnƒõn√≠ pou≈æ√≠t tento p≈ô√≠kaz.", ephemeral=True)
        return

    await interaction.response.send_message("üõë Zastavuji a restartuji bota...", ephemeral=True)
    await send_dm_to_owner("üõë Bot byl restartov√°n p≈ô√≠kazem `/stop`.")
    os.execv(sys.executable, ['python3'] + sys.argv) 

@bot.tree.command(name='shutdown', description='Vypne bota bez restartu.')
async def shutdown_command(interaction: discord.Interaction):
    if not is_owner_or_designated_channel(interaction):
        await interaction.response.send_message("Nem√°≈° opr√°vnƒõn√≠ pou≈æ√≠t tento p≈ô√≠kaz.", ephemeral=True)
        return
    
    await interaction.response.send_message("üõë Vyp√≠n√°m bota...", ephemeral=True)
    logging.info("üõë Bot je vyp√≠n√°n p≈ô√≠kazem /shutdown.")
    await send_dm_to_owner("üõë Bot byl vypnut p≈ô√≠kazem `/shutdown`.")
    await bot.close()
        
# -------------------------------------------
# Spu≈°tƒõn√≠ bota
# -------------------------------------------
if __name__ == "__main__":
    ensure_folder(BASE_DOWNLOAD_DIR)
    ensure_folder(os.path.join(BASE_DOWNLOAD_DIR, AUDIO_DIR_NAME))
    ensure_folder(os.path.join(BASE_DOWNLOAD_DIR, VIDEO_DIR_NAME))
    
    # Zajist√≠me existenci archivaƒçn√≠ho souboru
    Path(DOWNLOAD_ARCHIVE_FILE).touch(exist_ok=True)

    if not DISCORD_BOT_TOKEN:
        logging.critical("‚ùå Chyb√≠ DISCORD_BOT_TOKEN v .env souboru. Bot nelze spustit.")
        print("‚ùå Chyb√≠ DISCORD_BOT_TOKEN v .env souboru. Bot nelze spustit.")
    else:
        try:
            bot.run(DISCORD_BOT_TOKEN)
        except Exception as e:
            logging.critical(f"‚ùå Chyba p≈ôi spou≈°tƒõn√≠ bota: {e}")
            print(f"‚ùå Chyba p≈ôi spou≈°tƒõn√≠ bota: {e}")